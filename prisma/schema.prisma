// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String    @default("user") // 'user' or 'admin'
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Add your existing models below this line
model Category {
  id           String    @id @default(cuid())
  name         String    @unique
  displayOrder Int       @default(0) @map("display_order")
  menuItems    MenuItem[]
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("categories")
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String?  @map("image_url")
  categoryId  String   @map("category_id")
  category    Category @relation(fields: [categoryId], references: [id])
  recipe      Recipe?
  isAvailable Boolean  @default(true) @map("is_available")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("menu_items")
}

model Recipe {
  id           String       @id @default(cuid())
  menuItemId   String       @unique @map("menu_item_id")
  menuItem     MenuItem     @relation(fields: [menuItemId], references: [id])
  prepTime     Int          @default(0) @map("prep_time") // in minutes
  ingredients  Ingredient[]
  instructions Instruction[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@map("recipes")
}

model Ingredient {
  id       String  @id @default(cuid())
  recipeId String  @map("recipe_id")
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  name     String
  amount   Decimal @db.Decimal(10, 2)
  unit     String
  order    Int     @default(0)

  @@map("ingredients")
}

model Instruction {
  id       String  @id @default(cuid())
  recipeId String  @map("recipe_id")
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  step     String  @db.Text
  order    Int     @default(0)

  @@map("instructions")
}
